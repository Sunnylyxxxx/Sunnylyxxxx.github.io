import{j as e,R as i}from"./client-fa1d5dfc.js";import{N as s,F as r}from"./Footer-b366ede3.js";import{P as n}from"./ProjectRowCard-9135527f.js";function a(){return e.jsxs("div",{className:"projects-page",id:"projects",children:[e.jsx("div",{className:"section",children:e.jsx(s,{})}),e.jsxs("div",{className:"section-middle",children:[e.jsx(n,{image:"../assets/stormapproaching.png",title:"Storm Approaching",year:"Spring 2025",category:"Video Game Design",other:"Instructor: Jeff Wilson",other1:"Teammates: Waiyuk Kwong, Jincheng Song, Xiao Lin, Leyao Zhang",skills:"Unity, C#, Enemy AI, NavMesh, State Machines, Animation Blending, Game Design",description:e.jsxs(e.Fragment,{children:[e.jsxs("p",{children:["Developed for ",e.jsx("em",{children:e.jsx("strong",{children:"CS 4455 Video Game Design"})})," in Spring 2025,",e.jsx("strong",{children:" Storm Approaching"})," is a 3D combat game built in Unity where players navigate a dystopian world and fight through waves of AI-controlled enemies."]}),e.jsxs("p",{children:["I was responsible for designing and implementing the ",e.jsx("strong",{children:"enemy system"}),", including",e.jsx("strong",{children:"AI behavior, movement logic, attack patterns, and animation control"}),". Using state machines and Unity’s NavMesh, I built enemies that dynamically react to player actions and contribute to the game’s pacing and difficulty."]})]}),link:"/Sunny_Personal_Website/Projects/StormApproaching/"}),e.jsx(n,{image:"../assets/cgai.jpg",title:"AI-Powered Computer Graphics",year:"Spring 2025",category:"Generative Graphics",other:"Instructor: Bo Zhu",skills:"NeRF, SDF, Gaussian Splatting, Differentiable Physics, Ray Marching, PyTorch",description:e.jsxs("div",{children:[e.jsxs("p",{children:[e.jsx("em",{children:e.jsx("strong",{children:"CS 8803-CGA"})})," is a graduate-level course on emerging AI-driven computer graphics techniques, covering topics such as",e.jsx("strong",{children:" signed distance fields (SDFs), neural radiance fields (NeRF), 3D Gaussian splatting, generative modeling, and differentiable physics simulation"}),"."]}),e.jsxs("p",{children:["I implemented several interactive graphics systems using ",e.jsx("strong",{children:"ray marching, volume rendering, and position-based dynamics (XPBD)"}),". The course emphasizes bridging traditional rendering pipelines with modern neural and differentiable approaches."]})]}),link:"/Sunny_Personal_Website/Projects/AICG/"}),e.jsx(n,{image:"../assets/carplate-1.png",title:"Real-time License Plate Recognition",year:"Spring 2025",category:"Machine Learning",other:"Instructor: Max Mahdi Roozbahani",other1:"Teammates: Zishuo Wang, Tianqin Yu, Yuwen Ding, Joe Zhu",skills:"YOLOv8, EasyOCR, Google Cloud Vision, Python, OpenCV, Machine Learning",description:e.jsxs(e.Fragment,{children:[e.jsxs("p",{children:["This project implements a full pipeline for ",e.jsx("strong",{children:"automatic license plate detection and recognition"})," using real-world traffic images and deep learning-based object detection models."]}),e.jsxs("p",{children:["We applied ",e.jsx("strong",{children:"YOLOv8"})," for plate detection and a hybrid OCR approach combining",e.jsx("strong",{children:"EasyOCR and Google Cloud Vision"}),". Our pipeline includes preprocessing steps such as cropping, DPI filtering, grayscale conversion, contrast enhancement, and morphological operations. We achieved a ",e.jsx("strong",{children:"93.33% overall OCR accuracy"})," and used a confidence-based fallback mechanism to balance cost and performance."]})]}),link:"/Sunny_Personal_Website/Projects/CarplateRecognition/"}),e.jsx(n,{image:"../assets/pcg.png",title:"Procedure Content Generation",year:"Fall 2024",category:"PCG",other:"Instructor: Greg Turk",skills:"Unity, C#, Prefab, Procedural Mesh, Physics Simulations, Rendering",description:e.jsxs("div",{children:[e.jsxs("p",{children:["This semester-long course project from ",e.jsx("em",{children:e.jsx("strong",{children:"CS 4803 Procedural Content Generation "})}),"explores how algorithmic systems and physics-based simulation drive dynamic content creation in Unity."]}),e.jsxs("p",{children:["Developed in C#, the four assignments include ",e.jsx("strong",{children:"dungeon generation, procedural vehicles, modular buildings, and flocking simulation"}),", each applying a distinct procedural method."]})]}),link:"/Sunny_Personal_Website/Projects/PCG/"}),e.jsx(n,{image:"../assets/graphics.png",title:"Computer Graphics",year:"Fall 2024",category:"Graphics",other:"Instructor: Bo Zhu",skills:"OpenGL, GLSL, Shader, Simulation, Animation, Ray Tracing",description:e.jsxs("div",{children:[e.jsxs("p",{children:["This Georgia Tech course, ",e.jsx("em",{children:e.jsx("strong",{children:"CS 3451 Computer Graphics"})}),", provides a comprehensive foundation in modern graphics techniques including ",e.jsx("strong",{children:"OpenGL rendering, transformation matrices, lighting and shading, procedural modeling, animation, and ray tracing"}),"."]}),e.jsxs("p",{children:["I implemented multiple assignments using ",e.jsx("strong",{children:"GLSL shaders"})," and C++ to explore GPU pipelines, mesh subdivision, physically-based animation, and realistic rendering. The course emphasized creativity and visual storytelling."]})]})}),e.jsx(n,{image:"../assets/cis425-opengl.png",title:"Computer Graphics with OpenGL",year:"Spring 2023",category:"Graphics",other:"Instructor: Dr. Marjory Baruch",skills:"C++, OpenGL, GLUT, 2D/3D Rendering, Transformations, Animation, Particle Systems",description:e.jsxs("div",{children:[e.jsxs("p",{children:[e.jsx("em",{children:e.jsx("strong",{children:"CIS 425"})})," is an undergraduate computer graphics course at Syracuse University focused on",e.jsx("strong",{children:" modern OpenGL graphics programming using C++"}),". It covered key topics such as ",e.jsx("strong",{children:"matrix transformations, input interaction, 2D/3D rendering, lighting, textures, Bezier curves, animation, and particle systems"}),"."]}),e.jsxs("p",{children:["Over the semester, I completed ",e.jsx("strong",{children:"four major graphics assignments"})," and a ",e.jsx("strong",{children:" final project"}),"using the OpenGL 3.2 pipeline with GLUT, gaining a hands-on understanding of the programmable GPU pipeline."]})]})})]}),e.jsx("div",{className:"section",children:e.jsx(r,{})})]})}i.createRoot(document.getElementById("root")).render(e.jsx(e.Fragment,{children:e.jsx(a,{})}));
